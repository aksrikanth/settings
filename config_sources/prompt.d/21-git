#!/usr/bin/env bash

function __git () {
  result__=""
  unadorned_result__=""
  if [ -z "$( git rev-parse --is-inside-work-tree 2>/dev/null )" ]
  then
    return  # Not a git directory
  fi

  if [ -f ~/.prompt_git_filter ] && [ -n "$( echo $PWD | egrep -f ~/.prompt_git_filter )" ]
  then
    return  # Treat it like not a git directory
  fi
  __prompt_color
  local prompt_color__=$result__

  local local_branch="$( git branch --no-color 2>/dev/null | grep '^\*' | sed 's/^[^ ]* //' )"
  if [ -z "$( echo $local_branch | grep -v 'no branch, rebasing' )" ]
  then
    unadorned_result__="$local_branch"
    result__="$context_error__$unadorned_result__$no_color__"
  else
    local remote_branch="$(
      git for-each-ref --format='%(upstream:short)' `git symbolic-ref -q HEAD` | sed 's@^\(.\).*/\(.*\)$@\1/\2@'
    )"
    if [ -z "$remote_branch" ]
    then
      unadorned_result__="$local_branch"
      result__="$context_local__$unadorned_result__$no_color__"
    else
      let local head_count="$( git rev-list @{u}..HEAD | wc -l | sed 's/ *//' )"
      let local remote_count="$( git rev-list HEAD..@{u} | wc -l | sed 's/ *//' )"
      unadorned_result__="$local_branch $head_count:$remote_count $remote_branch"
      result__="$context_local__$local_branch $context_meta__$head_count$prompt_color__$sep$context_meta__$remote_count $context_remote__$remote_branch$no_color__"
    fi
  fi
}
