#!/usr/bin/env bash

# Termwide prompt

function git_params () {
  git_prefix=""
  git_suffix=""
  git_error=""
  local_branch=""
  counts=""
  remote_branch=""
  let branch_size=0
  if [ -z "$( git rev-parse --is-inside-work-tree 2>/dev/null )" ]
  then
    return  # Not a git directory
  fi

  if [ -f ~/.prompt_git_filter ] && [ -n "$( echo $PWD | egrep -f ~/.prompt_git_filter )" ]
  then
    return  # Treat it like not a git directory
  fi

  local_branch="$( git branch --no-color 2>/dev/null | grep '^\*' | sed 's/^[^ ]* //' )"
  git_prefix="─┤"
  git_suffix="├─"

  if [ -z "$( echo $local_branch | grep -v 'no branch, rebasing' )" ]
  then
    git_error="$local_branch"
    local_branch=""
    let branch_size=$( echo -n "$git_error" | wc -c | sed 's/^ *//; s/ *$//' )
  else
    git_error=""
    remote_branch="$(
      git for-each-ref --format='%(upstream:short)' `git symbolic-ref -q HEAD` | sed 's@^\(.\).*/\(.*\)$@\1/\2@'
    )"
    if [ -z "$remote_branch" ]
    then
      counts=""
      let branch_size=$( echo -n "$local_branch" | wc -c | sed 's/^ *//; s/ *$//' )
    else
      let head_count="$( git rev-list @{u}..HEAD | wc -l | sed 's/ *//' )"
      let remote_count="$( git rev-list HEAD..@{u} | wc -l | sed 's/ *//' )"
      counts=" $head_count:$remote_count "
      let branch_size=$(
        echo -n "$local_branch $head_count:$remote_count $remote_branch" | wc -c | sed 's/^ *//; s/ *$//'
      )
    fi
  fi
  let branch_size=$branch_size+4
}

function prompt_command () {
  username=$( whoami )
  hostname=$( hostname -s )
  directory="${PWD}"
  let directory_size=$( echo -n "${directory}"| wc -c | sed 's/^ *//; s/ *$//' )

  git_params

  let promptsize=$( echo -n "---()--"| wc -c | sed 's/^ *//; s/ *$//' )
  let fillsize=${COLUMNS}-${promptsize}-${branch_size}-${directory_size}
  fill=''

  if [ "${fillsize}" -lt "0" ]
  then
    let cut=$(( 3 - ${fillsize} ))
    directory="...$( echo -n $directory | sed "s/^.\{$cut\}//" )"
  else
    fill=$( printf "%0${fillsize}d" 0 | sed s/./─/g )
  fi
}

PROMPT_COMMAND=prompt_command

function twttypow () {
  local GRAY="\[\033[1;30m\]"
  local LIGHT_GRAY="\[\033[0;37m\]"
  local WHITE="\[\033[1;37m\]"
  local NO_COLOUR="\[\033[0m\]"

  local GREEN="\[\033[01;32m\]"
  local LIGHT_BLUE="\[\033[1;34m\]"
  local YELLOW="\[\033[1;33m\]"
  local LIGHT_RED="\[\033[1;31m\]"

  #local ESC="\033k\033\134"
  local ESC=""
  local BASE_COLOR=""
  local PROMPT_CHAR=""
  local BRANCH_COLOR=""

  if [ `whoami` = "root" ]
  then
    BASE_COLOR=$LIGHT_RED
    PROMPT_CHAR="#"
  else
    BASE_COLOR=$YELLOW
    PROMPT_CHAR="$"
  fi

  PS1="\n\
${BASE_COLOR}┌${LIGHT_BLUE}\${git_prefix}\
${LIGHT_RED}\${git_error}${GREEN}\${local_branch}${LIGHT_BLUE}\${counts}${GREEN}\${remote_branch}\
${LIGHT_BLUE}\${git_suffix}${BASE_COLOR}─\${fill}${LIGHT_BLUE}─┤${GREEN}\${directory}${LIGHT_BLUE}├─${BASE_COLOR}─\n\
${BASE_COLOR}└${LIGHT_BLUE}─┤${BASE_COLOR}\${username}${LIGHT_BLUE}@${BASE_COLOR}\${hostname}${LIGHT_BLUE}├─\
${BASE_COLOR}─${NO_COLOUR}${ESC} ${PROMPT_CHAR} "

  PS2="   "
}
