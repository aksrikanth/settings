#!/usr/bin/env bash

# Termwide prompt

function __status () {
  let local _code=$?
  error_status=""
  if [ $_code != 0 ]
  then
    error_status=" $_code"
  fi
  hostname=$( hostname -s )
}

function __git_params () {
  git_prefix=""
  git_suffix=""
  git_error=""
  local_branch=""
  counts=""
  remote_branch=""
  let branch_size=0
  if [ -z "$( git rev-parse --is-inside-work-tree 2>/dev/null )" ]
  then
    return  # Not a git directory
  fi

  if [ -f ~/.prompt_git_filter ] && [ -n "$( echo $PWD | egrep -f ~/.prompt_git_filter )" ]
  then
    return  # Treat it like not a git directory
  fi

  local_branch="$( git branch --no-color 2>/dev/null | grep '^\*' | sed 's/^[^ ]* //' )"
  git_prefix="─┤"
  git_suffix="├─"

  if [ -z "$( echo $local_branch | grep -v 'no branch, rebasing' )" ]
  then
    git_error="$local_branch"
    local_branch=""
    let branch_size=$( echo -n "$git_error" | wc -c | sed 's/^ *//; s/ *$//' )
  else
    git_error=""
    remote_branch="$(
      git for-each-ref --format='%(upstream:short)' `git symbolic-ref -q HEAD` | sed 's@^\(.\).*/\(.*\)$@\1/\2@'
    )"
    if [ -z "$remote_branch" ]
    then
      let branch_size=$( echo -n "$local_branch" | wc -c | sed 's/^ *//; s/ *$//' )
    else
      let local head_count="$( git rev-list @{u}..HEAD | wc -l | sed 's/ *//' )"
      let local remote_count="$( git rev-list HEAD..@{u} | wc -l | sed 's/ *//' )"
      counts=" $head_count:$remote_count "
      let branch_size=$(
        echo -n "$local_branch$counts$remote_branch" | wc -c | sed 's/^ *//; s/ *$//'
      )
    fi
  fi
  let branch_size=$branch_size+4
}

function __directory () {
  directory="${PWD}"
  let directory_size=$( echo -n "${directory}"| wc -c | sed 's/^ *//; s/ *$//' )
}

function __prompt_char () {
  base_color=$'\e[0;37m'
  prompt_color=$'\e[0;33m'
  prompt_char="$"
  if [ `whoami` = "root" ]
  then
    prompt_char="#"
    prompt_color=$'\e[0;31m'
    base_color=$'\e[0;31m'
  fi
}

function prompt_command () {
  __status
  __git_params
  __directory
  __prompt_char

  let promptsize=$( echo -n "---()--"| wc -c | sed 's/^ *//; s/ *$//' )
  let fillsize=${COLUMNS}-${promptsize}-${branch_size}-${directory_size}
  fill=''

  if [ "${fillsize}" -lt "0" ]
  then
    let local cut=3-${fillsize}
    directory="...$( echo -n $directory | sed "s/^.\{$cut\}//" )"
  else
    fill=$( printf "%0${fillsize}d" 0 | sed s/./─/g )
  fi
}

PROMPT_COMMAND=prompt_command

function twttypow () {
  prompt_command

  local GRAY="\[\033[0;30m\]"
  local RED="\[\033[0;31m\]"
  local GREEN="\[\033[0;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local BLUE="\[\033[0;34m\]"
  local CYAN="\[\033[0;36m\]"
  local LIGHT_GRAY="\[\033[0;37m\]"
  local LIGHT_RED="\[\033[1;31m\]"
  local WHITE="\[\033[1;37m\]"
  local NO_COLOR="\[\033[0m\]"

  PS1="\n\[\${base_color}\]┌\
${BLUE}\${git_prefix}${LIGHT_RED}\${git_error}${CYAN}\${local_branch}\
${BLUE}\${counts}${GRAY}\${remote_branch}${BLUE}\${git_suffix}\
\[\${base_color}\]─\${fill}${BLUE}─┤${GREEN}\${directory}${BLUE}├─\[\${base_color}\]─\n\
\[\${base_color}\]└${BLUE}─┤\
${LIGHT_GRAY}\${hostname}${RED}\${error_status}${BLUE}├─\[\${base_color}\]─ \
\[\${prompt_color}\]\${prompt_char}${NO_COLOR} "

  PS2="   "
}
